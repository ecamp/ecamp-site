---
import { i18nStaticPaths } from "~/i18n";
import { getCollection } from "astro:content";
import { SITE, BLOG } from "~/config.mjs";

import Layout from "~/layouts/BlogLayout.astro";
import BlogList from "~/components/blog/List.astro";
import Pagination from "~/components/atoms/Pagination.astro";

export async function getStaticPaths({ paginate }) {
  const posts = await getCollection("posts");
  return BLOG.locales.flatMap((locale) =>
    paginate(
      i18nStaticPaths(posts, "[...locale]/blog/[...path]")
        .filter(({ params }) => params.locale == locale)
        .sort(
          ({ props: a }, { props: b }) =>
            new Date(b.data.pubDate).getTime() -
            new Date(a.data.pubDate).getTime(),
        ),
      {
        params: { locale },
        props: {
          document: {
            type: "pages",
            locale,
            path: "blog",
            id: "blog",
            translations: { de: "/de/blog", en: "/en/blog" },
          },
        },
        pageSize: BLOG.postsPerPage,
      },
    ),
  );
}

const { page, document } = Astro.props;

const currentPage = page.currentPage ?? 1;
const currentDocument = {
	...document,
	translations: Object.fromEntries(Object.entries(document.translations).map(
		([lang, path]) => [
			lang,
			path + (currentPage === 1 ? "" : `/${currentPage}`),
		],
	)),
};

const meta = {
  title: `Blog ${currentPage > 1 ? `— Page ${currentPage} ` : ""}— ${
    SITE.name
  }`,
  description: SITE.description,
};
---

<Layout meta={meta} document={currentDocument}>
  <Fragment slot="title">Blog</Fragment>
  <BlogList posts={page.data} />
  <Pagination prevUrl={page.url.prev} nextUrl={page.url.next} />
</Layout>
